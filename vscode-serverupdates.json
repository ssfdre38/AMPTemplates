[
    {
        "UpdateStageName": "Environment Check",
        "UpdateSourcePlatform": "All",
        "UpdateSource": "Executable",
        "UpdateSourceData": "{{Linux:/bin/bash}}{{Windows:powershell.exe}}",
        "UpdateSourceArgs": "{{Linux:-c \"echo 'Environment Check:'; pwd; whoami; which wget || echo 'wget not found'; which curl || echo 'curl not found'; ls -la; echo 'Network test:'; wget -qO- https://httpbin.org/ip 2>/dev/null || curl -s https://httpbin.org/ip || echo 'No internet access'\"}}{{Windows:-NoProfile -Command \"Write-Output 'Environment Check:'; Get-Location; whoami; Get-Command wget -ErrorAction SilentlyContinue | Out-Null; if ($?) { Write-Output 'wget available' } else { Write-Output 'wget not found' }; Get-ChildItem; Write-Output 'Network test:'; try { (Invoke-WebRequest -UseBasicParsing -Uri 'https://httpbin.org/ip').Content } catch { Write-Output 'No internet access' }\"}}",
        "SkipOnFailure": true
    },
    {
        "UpdateStageName": "VS Code Server Download",
        "UpdateSourcePlatform": "Linux",
        "UpdateSourceArch": "x86_64",
        "UpdateSource": "Executable",
        "UpdateSourceData": "/bin/bash",
        "UpdateSourceArgs": "-c \"mkdir -p vscode-server && cd vscode-server && echo 'Downloading Microsoft VS Code Server for Linux x64...'; if [[ -f bin/code-server && -x bin/code-server ]]; then echo 'VS Code Server already installed. Checking version...'; ./bin/code-server --version 2>/dev/null || echo 'Version check failed, will re-download'; fi; echo 'Downloading latest VS Code Server...'; wget -qO vscode-server.tar.gz 'https://update.code.visualstudio.com/latest/server-linux-x64/stable' || { echo 'Download failed from Microsoft'; exit 1; }; echo 'Extracting...'; tar -xzf vscode-server.tar.gz || { echo 'Extract failed'; exit 1; }; rm -f vscode-server.tar.gz; echo 'Setting up VS Code Server...'; mkdir -p bin; mv vscode-server-linux-x64/bin/code-server bin/ 2>/dev/null || mv */bin/code-server bin/ 2>/dev/null || find . -name 'code-server' -type f -executable -exec mv {} bin/ \\; 2>/dev/null; chmod +x bin/code-server 2>/dev/null || true; echo 'Microsoft VS Code Server downloaded successfully'; ./bin/code-server --version 2>/dev/null || echo 'Warning: Version check failed but installation completed'\"",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "VS Code Server Download",
        "UpdateSourcePlatform": "Linux",
        "UpdateSourceArch": "aarch64",
        "UpdateSource": "Executable",
        "UpdateSourceData": "/bin/bash",
        "UpdateSourceArgs": "-c \"mkdir -p vscode-server && cd vscode-server && echo 'Downloading Microsoft VS Code Server for Linux ARM64...'; if [[ -f bin/code-server && -x bin/code-server ]]; then echo 'VS Code Server already installed. Checking version...'; ./bin/code-server --version 2>/dev/null || echo 'Version check failed, will re-download'; fi; echo 'Downloading latest VS Code Server...'; wget -qO vscode-server.tar.gz 'https://update.code.visualstudio.com/latest/server-linux-arm64/stable' || { echo 'Download failed from Microsoft'; exit 1; }; echo 'Extracting...'; tar -xzf vscode-server.tar.gz || { echo 'Extract failed'; exit 1; }; rm -f vscode-server.tar.gz; echo 'Setting up VS Code Server...'; mkdir -p bin; mv vscode-server-linux-arm64/bin/code-server bin/ 2>/dev/null || mv */bin/code-server bin/ 2>/dev/null || find . -name 'code-server' -type f -executable -exec mv {} bin/ \\; 2>/dev/null; chmod +x bin/code-server 2>/dev/null || true; echo 'Microsoft VS Code Server downloaded successfully'; ./bin/code-server --version 2>/dev/null || echo 'Warning: Version check failed but installation completed'\"",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "VS Code Server Download",
        "UpdateSourcePlatform": "Windows",
        "UpdateSource": "Executable",
        "UpdateSourceData": "powershell.exe",
        "UpdateSourceArgs": "-NoProfile -Command \"$ProgressPreference='SilentlyContinue'; [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; if (-not (Test-Path 'vscode-server')) { New-Item -ItemType Directory -Path 'vscode-server' -Force | Out-Null }; Set-Location -Path 'vscode-server'; Write-Output 'Downloading Microsoft VS Code Server for Windows...'; if ((Test-Path 'bin\\code-server.cmd') -and (Test-Path 'bin\\code-server.exe')) { Write-Output 'VS Code Server already installed. Checking...'; try { & './bin/code-server.cmd' --version 2>$null | Out-Null } catch { Write-Output 'Version check failed, will re-download' } }; Write-Output 'Downloading latest VS Code Server...'; try { Invoke-WebRequest -UseBasicParsing -Uri 'https://update.code.visualstudio.com/latest/server-win32-x64/stable' -OutFile 'vscode-server.zip' -ErrorAction Stop } catch { Write-Output 'Download failed from Microsoft'; exit 1; }; Write-Output 'Extracting...'; try { Expand-Archive -Path 'vscode-server.zip' -DestinationPath '.' -Force; Remove-Item 'vscode-server.zip' -Force; Write-Output 'Setting up VS Code Server...'; if (-not (Test-Path 'bin')) { New-Item -ItemType Directory -Path 'bin' -Force | Out-Null }; Get-ChildItem -Directory | Where-Object { $_.Name -like 'vscode-server-win32-*' } | ForEach-Object { if (Test-Path (Join-Path $_.FullName 'bin\\code-server.cmd')) { Copy-Item (Join-Path $_.FullName 'bin\\*') 'bin\\' -Force; Remove-Item $_.FullName -Recurse -Force } }; Write-Output 'Microsoft VS Code Server downloaded successfully'; try { & './bin/code-server.cmd' --version 2>$null | Out-Null; Write-Output 'Installation verified' } catch { Write-Output 'Warning: Version check failed but installation completed' } } catch { Write-Output 'Extract failed'; exit 1; }\"",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Create Workspace Directory",
        "UpdateSourcePlatform": "All",
        "UpdateSource": "Executable",
        "UpdateSourceData": "{{Linux:/bin/bash}}{{Windows:powershell.exe}}",
        "UpdateSourceArgs": "{{Linux:-c \"mkdir -p {{WorkspaceDir}} && echo 'Workspace directory created at {{WorkspaceDir}}'\"}}{{Windows:-NoProfile -Command \"if (-not (Test-Path '{{WorkspaceDir}}')) { New-Item -ItemType Directory -Path '{{WorkspaceDir}}' -Force | Out-Null }; Write-Output 'Workspace directory created at {{WorkspaceDir}}'\"}}",
        "SkipOnFailure": true
    },
    {
        "UpdateStageName": "Setup Authentication Arguments",
        "UpdateSourcePlatform": "All",
        "UpdateSource": "SetSetting",
        "UpdateSourceData": "AuthArgs",
        "UpdateSourceArgs": "{{AuthType:none:--without-connection-token}}{{AuthType:github:--github-auth={{GitHubToken}}}}",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Setup Config Arguments",
        "UpdateSourcePlatform": "All",
        "UpdateSource": "SetSetting",
        "UpdateSourceData": "ConfigArgs",
        "UpdateSourceArgs": "{{UserDataDir:--user-data-dir={{UserDataDir}}}} {{ExtensionsDir:--extensions-dir={{ExtensionsDir}}}} {{EnableTelemetry:true:--enable-telemetry}} {{ConnectionToken:--connection-token={{ConnectionToken}}}}",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Setup Workspace Arguments",
        "UpdateSourcePlatform": "All",
        "UpdateSource": "SetSetting",
        "UpdateSourceData": "WorkspaceArgs",
        "UpdateSourceArgs": "{{WorkspaceDir}}",
        "SkipOnFailure": false
    }
]